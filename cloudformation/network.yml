Parameters:

 EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

 VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

 PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

 
Resources:
  
    myVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        Tags:
            - Key: Name
              Value: !Ref EnvironmentName


    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref myVPC
        CidrBlock: !Ref PublicSubnetCIDR
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        MapPublicIpOnLaunch: true
        Tags:
           - Key: Name
             Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    myInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
             - Key: Name
               Value: !Ref EnvironmentName

    
    VPCGatewayAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          VpcId:
              Ref: myVPC
          InternetGatewayId:
              Ref: myInternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref myVPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttach
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref myInternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
    
        # InstanceSecurityGroup:
    # Type: AWS::EC2::SecurityGroup
    # Properties:
    #     GroupDescription: Allow http to client host
    #     VpcId:
    #       Ref: myVPC
    #     SecurityGroupIngress:
    #     - IpProtocol: tcp
    #       FromPort: 80
    #       ToPort: 80
    #       CidrIp: 0.0.0.0/0
    #     SecurityGroupEgress:
    #     - IpProtocol: tcp
    #       FromPort: 80
    #       ToPort: 80
    #       CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our host 
        VpcId: !Ref myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

        
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update -y
            sudo apt-get install git apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
            sudo dpkg --configure -a
            sudo curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 
            sudo chmod +x minikube
            sudo mkdir -p /usr/local/bin/
            sudo install minikube /usr/local/bin/
            sudo apt-get remove docker docker-engine docker.io containerd runc
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y
            sudo apt-get update -y
            sudo apt-get install docker-ce docker-ce-cli containerd.io -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/` curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            sudo chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            sudo usermod -aG docker ubuntu && newgrp docker
            minikube start
            git clone https://github.com/SamarGooda/udacity-nanodegree-capstonProject.git  /project
            kubectl apply -f project/kubernetes/redis-deployment.yaml
            kubectl apply -f project/kubernetes/redis-service.yaml
            kubectl apply -f project/kubernetes/python-app-deployment.yaml
            kubectl apply -f project/kubernetes/python-app-service.yaml
        ImageId: ami-005bdb005fb00e791
        KeyName: Scloud
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t2.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: 1
        MaxSize: 1
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
    
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 300
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 10
        VpcId: !Ref myVPC

    
Outputs:
      
      
    StackVPC:
      Description: A reference to the created VPC
      Value: !Ref myVPC
      Export:
          Name: !Sub "${EnvironmentName}-VPCID"

    VPCPublicRouteTable:
      Description: PublicRouteTable
      Value: !Ref PublicRouteTable
      Export:
          Name: !Sub "${EnvironmentName}-PublicRouteTable"

    PublicSubnet1:
      Description: A reference to the public subnet in the 1st Availability Zone
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-PUB1-SN
    
